// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using Skrivmaskin.Compiler;
using Skrivmaskin.Lexing;
using Skrivmaskin.Design;
using System.Collections.Generic;

namespace Skrivmaskin.Editor
{
    public partial class DesignViewController : NSViewController
    {
        private SkrivmaskinCompiler compiler = new SkrivmaskinCompiler (new DefaultLexerSyntax ());

        public DesignViewController (IntPtr handle) : base (handle)
        {
            this.AddObserver ("designModelArray", NSKeyValueObservingOptions.New, DocumentEdited);
        }

        bool loading = false;

        internal void DocumentEditedAction ()
        {
            if (!loading) {
                // Reread project from the outline view
                Project = CreateProjectFromOutlineView ();
                CompiledProject = compiler.Compile (Project); // has a caching layer so should be quick
            }
        }

        Project CreateProjectFromOutlineView ()
        {
            var variablesNode = Designs.GetItem<DesignModel> ((nuint)0);
            var definitionNode = Designs.GetItem<DesignModel> ((nuint)1);
            var variables = new List<Variable> ();
            for (int i = 0; i < variablesNode.NumberOfDesigns; i++) {
                var variableNode = variablesNode.Designs.GetItem<DesignModel> ((nuint)i);
                var variable = new Variable ();
                variable.Name = variableNode.Name;
                variable.Description = variableNode.Details;
                variable.Forms = new List<VariableForm> ();
                for (int j = 0; j < variableNode.NumberOfDesigns; j++) {
                    var variableFormNode = variableNode.Designs.GetItem<DesignModel> ((nuint)j);
                    var variableForm = new VariableForm ();
                    variableForm.Name = variableFormNode.Name;
                    variableForm.Suggestion = variableFormNode.Details;
                    variable.Forms.Add (variableForm);
                }
                variables.Add (variable);
            }
            var root = CreateDesignNode (definitionNode);
            return new Project (variables, root);
        }

        INode CreateDesignNode (DesignModel designModel)
        {
            switch (designModel.NodeType) {
            case DesignModelType.Text:
                return new TextNode (designModel.Details);
            case DesignModelType.Comment:
                return new CommentNode (designModel.Name, designModel.Details);
            case DesignModelType.Choice:
                var li = new List<INode> ();
                for (int i = 0; i < designModel.NumberOfDesigns; i++) {
                    li.Add (CreateDesignNode (designModel.Designs.GetItem<DesignModel> ((nuint)i)));
                }
                return new ChoiceNode (designModel.Name, li);
            case DesignModelType.Sequential:
                var li2 = new List<INode> ();
                for (int i = 0; i < designModel.NumberOfDesigns; i++) {
                    li2.Add (CreateDesignNode (designModel.Designs.GetItem<DesignModel> ((nuint)i)));
                }
                return new SequentialNode (designModel.Name, li2);
            case DesignModelType.ParagraphBreak:
                return new ParagraphBreakNode ();
            default:
                break;
            }
            throw new ApplicationException ("Unrecognised node type " + designModel.NodeType);
        }

        private void DocumentEdited (NSObservedChange sender)
        {
            DocumentEditedAction ();
        }

        internal Project Project { get; private set; } = new Project (new List<Variable> (), new SequentialNode ());
        private CompiledProject compiledProject = null;
        private SetVariablesViewController setVariablesViewController = null;
        private ResultsViewController resultsViewController = null;
        private CompiledProject CompiledProject
        {
            get {
                return compiledProject;}
            set {
                compiledProject = value;
                if (setVariablesViewController != null) {
                    setVariablesViewController.SetCompiledProject (compiledProject);
                    resultsViewController.SetCompiledProject (setVariablesViewController.VariableValues, compiledProject);
                }
            }
        }

        private NSMutableArray designs = new NSMutableArray ();
        public NSArray Designs {
            [Export ("designModelArray")]
            get { return designs; }
        }

        [Export ("addObject:")]
        public void AddDesign (DesignModel design)
        {
            WillChangeValue ("designModelArray");
            designs.Add (design);
            DidChangeValue ("designModelArray");
        }

        [Export ("insertObject:inDesignModelArrayAtIndex:")]
        public void InsertDesign (DesignModel design, nint index)
        {
            WillChangeValue ("designModelArray");
            designs.Insert (design, index);
            DidChangeValue ("designModelArray");
        }

        [Export ("removeObjectFromDesignModelArrayAtIndex:")]
        public void RemoveDesign (nint index)
        {
            WillChangeValue ("designModelArray");
            designs.RemoveObject (index);
            DidChangeValue ("designModelArray");
        }

        [Export ("setDesignModelArray:")]
        public void SetDesigns (NSMutableArray array)
        {
            WillChangeValue ("designModelArray");
            designs = array;
            DidChangeValue ("designModelArray");
        }

        public override void AwakeFromNib ()
        {
            base.AwakeFromNib ();
            loading = true;
            var array = new NSMutableArray ();
            SetDesigns (array);
            var variables = new DesignModel (this, "Variables");
            AddDesign (variables);
            var definition = new DesignModel (this, DesignModelType.Sequential, "Definition", "");
            AddDesign (definition);
            loading = false;
        }

        public bool CreateVariables (Project project, DesignModel variables, out string errorText)
        {
            foreach (var variable in project.VariableDefinitions) {
                var model = new DesignModel (this, variable);
                variables.AddDesign (model);
                foreach (var form in variable.Forms) {
                    model.AddDesign (new DesignModel (this, form));
                }
            }
            errorText = "";
            return true;
        }

        public bool CreateDefinition (INode designNode, Action<DesignModel> addDefn, out string errorText)
        {
            IEnumerable<INode> children;
            DesignModel design;
            switch (designNode.Type) {
            case NodeType.Choice:
                children = (designNode as ChoiceNode).Choices;
                design = new DesignModel (this, DesignModelType.Choice, (designNode as ChoiceNode).ChoiceName, "");
                break;
            case NodeType.Sequential:
                children = (designNode as SequentialNode).Sequential;
                design = new DesignModel (this, DesignModelType.Sequential, (designNode as SequentialNode).SequentialName, "");
                break;
            case NodeType.Comment:
                children = new INode [0];
                design = new DesignModel (this, DesignModelType.Comment, (designNode as CommentNode).CommentName, (designNode as CommentNode).Value);
                break;
            case NodeType.ParagraphBreak:
                children = new INode [0];
                design = new DesignModel (this, DesignModelType.ParagraphBreak, "Paragraph Break", "");
                break;
            case NodeType.Text:
                children = new INode [0];
                design = new DesignModel (this, DesignModelType.Text, "", (designNode as TextNode).Text);
                break;
            default:
                throw new ApplicationException ("Unrecognised design node type " + designNode.Type);
            }
            addDefn (design);
            foreach (var child in children) {
                if (!CreateDefinition (child, (d)=>design.AddDesign(d), out errorText))
                    return false;
            }
            errorText = "";
            return true;
        }

        public bool CreateTree (SetVariablesViewController setVariablesViewController, ResultsViewController resultsViewController, Project project)
        {
            this.setVariablesViewController = setVariablesViewController;
            this.resultsViewController = resultsViewController;
            string errorText;
            loading = true;
            Project = project; // no edits yet so no need to inform Apple about it
            var array = new NSMutableArray ();
            SetDesigns (array);
            var variables = new DesignModel (this, "Variables");
            AddDesign (variables);
            if (this.CreateVariables (project, variables, out errorText)) {
                if (this.CreateDefinition (project.Definition, (d) => AddDesign (d), out errorText)) {
                    CompiledProject = compiler.Compile (project);
                    loading = false;
                    return true;
                }
            }
            loading = false;
            return false;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
        }

        public override NSObject RepresentedObject {
            get {
                return base.RepresentedObject;
            }
            set {
                base.RepresentedObject = value;
                // Update the view, if already loaded.
            }
        }

        //TODO farm this out to threads??
        private void Compile ()
        {
        }
    }
}
