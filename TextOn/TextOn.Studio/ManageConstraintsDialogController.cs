// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using AppKit;
using TextOn.Nouns;
using System.Collections.Generic;

namespace TextOn.Studio
{
	public partial class ManageConstraintsDialogController : NSViewController
	{
        public ManageConstraintsDialogController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            Title = "Manage Constraints";
            DescriptionTextField.StringValue = string.Format ("Manage the Constraints on this Suggested value \"{0}\" for Noun [{1}]. The Suggestion will only be offered to users if the criteria are true.", SuggestionValue, NounName);

            constraints.Clear ();
            var dependencies = Profile.GetNounByName (NounName).Suggestions.Find ((s) => s.Value == SuggestionValue).Dependencies;
            foreach (var item in dependencies) {
                constraints.Add (item.Name, item.Value);
            }

            NounComboBox.SelectionChanged += (s, e) => {
                if (ValueComboBox.SelectedIndex >= 0) {
                    ValueComboBox.DeselectItem (ValueComboBox.SelectedIndex);
                }
                if (NounComboBox.SelectedIndex >= 0) {
                    BuildSuggestionComboBox ();
                } else {
                    ValueComboBox.DataSource = null;
                }
            };

            ValueComboBox.SelectionChanged += (s, e) => {
                AddRowEnabled = ValueComboBox.SelectedIndex >= 0 && values != null & ValueComboBox.SelectedIndex < values.Length;
            };

            RebuildTable ();
        }

        public string NounName { get; set; }
        public string SuggestionValue { get; set; }
        public NounProfile Profile { get; set; }
        private readonly Dictionary<string, string> constraints = new Dictionary<string, string> ();
        private string [] names;
        private string [] values;

        private void RebuildTable ()
        {
            var existingDependencies = Profile.GetExistingDependencies (NounName);
            var allowedDependencies = Profile.GetAllowedNewDependencies (NounName);
            var dependencies = existingDependencies.Concat (allowedDependencies);
            var remainingDependencies = dependencies.Where ((d) => !constraints.ContainsKey (d)).ToArray ();
            names = remainingDependencies;
            values = new string [0];
            NounComboBox.DataSource = new DefineNounsComboBoxDataSource (remainingDependencies);
            ValueComboBox.DataSource = null;
            ManageConstraintsTableView.DataSource = new ManageConstraintsTableViewDataSource (this, constraints);
            ManageConstraintsTableView.Delegate = new ManageConstraintsTableViewDelegate (this, constraints);
        }

        private void BuildSuggestionComboBox ()
        {
            var name = names [NounComboBox.SelectedIndex];
            values = Profile.GetNounByName (name).Suggestions.Select ((s) => s.Value).ToArray ();
            ValueComboBox.DataSource = new DefineNounsComboBoxDataSource (values);
        }

        partial void AddRow_Clicked (NSObject sender)
        {
            if ((this.NounComboBox.SelectedIndex >= 0) && (this.ValueComboBox.SelectedIndex >= 0)) {
                constraints.Add (names [NounComboBox.SelectedIndex], values [ValueComboBox.SelectedIndex]);
                NounComboBox.DeselectItem (NounComboBox.SelectedIndex);
                ValueComboBox.DeselectItem (ValueComboBox.SelectedIndex);
                ValueComboBox.Delegate = null;
                RebuildTable ();
            }
        }

        private bool addRowEnabled = false;
        public bool AddRowEnabled {
            [Export (nameof (AddRowEnabled))]
            get {
                return addRowEnabled;
            }
            set {
                WillChangeValue (nameof (AddRowEnabled));
                addRowEnabled = value;
                DidChangeValue (nameof (AddRowEnabled));
            }
        }

        public IEnumerable<NounSuggestionDependency> NewDependencies {
            get {
                return constraints.Select ((kvp) => new NounSuggestionDependency (kvp.Key, kvp.Value));
            }
        }

        public bool ApplyToFutureSuggestions {
            get {
                return ApplyToFuture.State == NSCellStateValue.On;
            }
        }

        public NSViewController Presentor { get; set; }

        private void CloseDialog ()
        {
            Presentor.DismissViewController (this);
        }

        partial void Cancel_Clicked (Foundation.NSObject sender)
        {
            CloseDialog ();
        }

        partial void OK_Clicked (Foundation.NSObject sender)
        {
            RaiseDialogAccepted ();
            CloseDialog ();
        }

        public EventHandler DialogAccepted;

        internal void RaiseDialogAccepted ()
        {
            if (this.DialogAccepted != null)
                this.DialogAccepted (this, EventArgs.Empty);
        }
	}
}
