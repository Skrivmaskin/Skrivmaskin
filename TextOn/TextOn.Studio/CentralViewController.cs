// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using TextOn.Compiler;
using TextOn.Lexing;
using TextOn.Design;

namespace TextOn.Studio
{
	public partial class CentralViewController : NSTabViewController
	{
        private const string Design = "Design";
        private const string Generate = "Generate";

        private readonly Dictionary<string, NSTabViewItem> tabViewItemRefs = new Dictionary<string, NSTabViewItem> ();
        internal bool inGenerateOnlyMode = false;
        private bool discoveredTabs = false;

		public CentralViewController (IntPtr handle) : base (handle)
		{
		}

        public void DiscoverTabs()
        {
            if (!discoveredTabs) {
                discoveredTabs = true;
                for (nint i = 0; i < TabViewItems.Length; i++) {
                    var tabViewItem = TabViewItems [i];
                    tabViewItemRefs.Add (tabViewItem.Label, tabViewItem);
                }
            }
        }

        //TODO can't keep using magic numbers here - get these numbers in a sensible way or else!
        internal void NavigateAndSelectDesignNode (INode designNode)
        {
            if (designViewController.SelectDesignNode (designNode))
                SelectedTabViewItemIndex = 0;
        }

        /// <summary>
        /// Enable Generate-only mode.
        /// </summary>
        internal void EnableGenerateOnlyMode ()
        {
            DiscoverTabs ();
            if (!inGenerateOnlyMode) {
                inGenerateOnlyMode = true;
                SelectedTabViewItemIndex = 1;
                RemoveTabViewItem (tabViewItemRefs [Design]);
            }
        }

        /// <summary>
        /// Disable Generate-only mode.
        /// </summary>
        internal void DisableGenerateOnlyMode ()
        {
            DiscoverTabs ();
            if (inGenerateOnlyMode) {
                inGenerateOnlyMode = false;
                InsertTabViewItem (tabViewItemRefs [Design], 0);
            }
        }

        private TextOnMode mode = TextOnMode.Design;
        public void SetMode (TextOnMode mode)
        {
            this.mode = mode;
            if (awake) {
                if (mode == TextOnMode.Design) DisableGenerateOnlyMode ();
                else EnableGenerateOnlyMode ();
            }
        }

        #region Design and Compiled templates
        internal TextOnCompiler Compiler = new TextOnCompiler (new DefaultLexerSyntax ());
        internal TextOnTemplate Template { get; set; } = new TextOnTemplate (new List<Variable> (), new SequentialNode ("Sentences", true, new List<INode> ()));
        private CompiledTemplate compiledTemplate = null;
        internal IReadOnlyDictionary<string, string> VariableValues {
            get {
                return setVariablesViewController.VariableValues;
            }
        }
        internal CompiledTemplate CompiledTemplate {
            get {
                return compiledTemplate;
            }
            set {
                compiledTemplate = value;
                if (setVariablesViewController != null) {
                    setVariablesViewController.SetCompiledTemplate ();
                }
            }
        }
        #endregion

        DesignViewController designViewController = null;
        DesignPreviewViewController designPreviewViewController = null;
        SetVariablesViewController setVariablesViewController = null;
        ResultsViewController resultsViewController = null;
        private bool awake = false;
        public override void AwakeFromNib ()
        {
            base.AwakeFromNib ();

            foreach (var child in ChildViewControllers) {
                foreach (var subchild in child.ChildViewControllers) {
                    if (subchild is DesignViewController) {
                        designViewController = (DesignViewController)subchild;
                        designViewController.SplitViewController = child as NSSplitViewController;
                    } else if (subchild is DesignPreviewViewController)
                        designPreviewViewController = (DesignPreviewViewController)subchild;
                    else if (subchild is SetVariablesViewController)
                        setVariablesViewController = (SetVariablesViewController)subchild;
                    else if (subchild is ResultsViewController)
                        resultsViewController = (ResultsViewController)subchild;
                }
            }
            designViewController.SetControllerLinks (this);
            setVariablesViewController.SetControllerLinks (this);
            resultsViewController.SetControllerLinks (this);

            Template = new TextOnTemplate (new List<Variable> (), new SequentialNode ("Sentences", true, new List<INode> ()));
            CreateTree (null, Template);

            if (mode == TextOnMode.Design) DisableGenerateOnlyMode ();
            else EnableGenerateOnlyMode ();

            awake = true;
        }

        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        /// <value>The file path.</value>
        public string FilePath { get; set; } = null;

        public void CreateTree (string path, TextOnTemplate template)
        {
            Template = template;
            FilePath = path;
            designViewController.CreateTree ();
        }

        public void GeneratePreview (INode node)
        {
            designPreviewViewController.UpdatePreview (node, CompiledTemplate);
        }
    }
}
