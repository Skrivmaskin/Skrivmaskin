// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using TextOn.Compiler;
using TextOn.Lexing;
using TextOn.Design;
using TextOn.Generation;
using TextOn.Version0;
using TextOn.Nouns;

namespace TextOn.Studio
{
	public partial class CentralViewController : NSTabViewController
	{
        private const int DesignViewTabViewItemIndex = 0;

		public CentralViewController (IntPtr handle) : base (handle)
		{
		}

        //TODO can't keep using magic numbers here - get these numbers in a sensible way or else!
        internal void NavigateAndSelectDesignNode (INode designNode)
        {
            if (designViewController.SelectDesignNode (designNode))
                SelectedTabViewItemIndex = DesignViewTabViewItemIndex;
        }

        #region Design and Compiled templates
        internal TextOnCompiler Compiler = new TextOnCompiler (new DefaultLexerSyntax ());
        internal TextOnTemplate Template { get; set; } = new TextOnTemplate (new NounProfile (), new SequentialNode ("Sentences", true, new List<INode> ()));
        private CompiledTemplate compiledTemplate = null;
        internal IReadOnlyDictionary<string, string> VariableValues {
            get {
                return setVariablesViewController.VariableValues;
            }
        }
        internal CompiledTemplate CompiledTemplate {
            get {
                return compiledTemplate;
            }
            set {
                compiledTemplate = value;
                if (setVariablesViewController != null) {
                    setVariablesViewController.SetCompiledTemplate ();
                }
            }
        }
        #endregion

        DesignViewController designViewController = null;
        DesignPreviewViewController designPreviewViewController = null;
        SetVariablesViewController setVariablesViewController = null;
        ResultsViewController resultsViewController = null;
        public override void AwakeFromNib ()
        {
            Console.Error.WriteLine ("Central AwakeFromNib");

            base.AwakeFromNib ();

            foreach (var child in ChildViewControllers) {
                foreach (var subchild in child.ChildViewControllers) {
                    if (subchild is DesignViewController) {
                        designViewController = (DesignViewController)subchild;
                        designViewController.SplitViewController = child as NSSplitViewController;
                    } else if (subchild is DesignPreviewViewController)
                        designPreviewViewController = (DesignPreviewViewController)subchild;
                    else if (subchild is SetVariablesViewController)
                        setVariablesViewController = (SetVariablesViewController)subchild;
                    else if (subchild is ResultsViewController)
                        resultsViewController = (ResultsViewController)subchild;
                }
            }
            designViewController.SetControllerLinks (this);
            setVariablesViewController.SetControllerLinks (this);
            resultsViewController.SetControllerLinks (this);
            designPreviewViewController.SetControllerLinks (this);

            Template = new TextOnTemplate (new NounProfile (), new SequentialNode ("Sentences", true, new List<INode> ()));
            CreateTree (null, Template);
        }

        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        /// <value>The file path.</value>
        public string FilePath { get; set; } = null;

        public void CreateTree (string path, TextOnTemplate template)
        {
            Console.Error.WriteLine ("Central CreateTree");

            Template = template;
            FilePath = path;
            designViewController.CreateTree ();
        }

        public void GeneratePreview (PreviewPartialRouteChoiceNode[] partialRoute)
        {
            designPreviewViewController.UpdatePreview (partialRoute);
        }

        internal void MarkPreviewAsInvalid ()
        {
            designPreviewViewController.MarkPreviewAsInvalid ();
        }
    }
}
