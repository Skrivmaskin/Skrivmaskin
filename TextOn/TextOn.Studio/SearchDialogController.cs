// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using TextOn.Compiler;

namespace TextOn.Studio
{
	public partial class SearchDialogController : NSViewController
	{
		public SearchDialogController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            SearchTextView.CompiledTemplate = CompiledTemplate;
            ReplaceTextView.CompiledTemplate = CompiledTemplate;
        }

        public string SearchText {
            get {
                return SearchTextView.Value;
            }
        }

        public string ReplaceText {
            get {
                return ReplaceTextView.Value;
            }
        }

        public CompiledTemplate CompiledTemplate { get; set; }

        private bool _enableReplaceGlobally = false;
        public bool enableReplaceGlobally {
            [Export (nameof (enableReplaceGlobally))]
            get {
                return _enableReplaceGlobally;
            }
            set {
                WillChangeValue (nameof (enableReplaceGlobally));
                _enableReplaceGlobally = value;
                DidChangeValue (nameof (enableReplaceGlobally));
            }
        }

        partial void ReplaceGlobally_Clicked (NSObject sender)
        {
            enableReplaceGlobally = ReplaceGloballyButton.State == NSCellStateValue.On;
        }

        public NSViewController Presentor { get; set; }

        private void CloseDialog ()
        {
            Presentor.DismissViewController (this);
        }

        partial void Cancel_Clicked (NSObject sender)
        {
            CloseDialog ();
        }

        partial void OK_Clicked (NSObject sender)
        {
            RaiseDialogAccepted ();
            CloseDialog ();
        }

        public EventHandler DialogAccepted;

        internal void RaiseDialogAccepted ()
        {
            if (this.DialogAccepted != null)
                this.DialogAccepted (this, EventArgs.Empty);
        }
	}
}
