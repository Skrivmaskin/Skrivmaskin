// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using AppKit;
using System.Collections.Generic;
using TextOn.Compiler;
using CoreGraphics;
using TextOn.Nouns;

namespace TextOn.Studio
{
    public partial class SetNounValuesViewController : NSViewController
    {
        public SetNounValuesViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
        }

        /// <summary>
        /// When the view appears, the Template is locked, so we can make a session that lasts that long. We tear down on disappear.
        /// </summary>
        public override void ViewDidAppear ()
        {
            base.ViewDidAppear ();

            session = parent.Template.Nouns.MakeSetValuesSession ();
            var newNouns = new NSMutableArray ();
            for (int i = 0; i < session.Count; i++) {
                var name = session.GetName (i);
                var nounModel = new SetNounModel (name, session.GetDescription (name), session.GetAcceptsUserValue (name));
                newNouns.Add (nounModel);
            }
            SetNouns (newNouns);

            var datasource = new SetNounValuesTableViewDataSource (session);
            SetNounValuesTableView.DataSource = datasource;
            SetNounValuesTableView.Delegate = new SetNounValuesTableViewDelegate (this, datasource);
        }

        public override void ViewDidDisappear ()
        {
            base.ViewDidDisappear ();

            session = null;
            // clean up the presentation as well
            SetNounValuesTableView.DataSource = null;
            SetNounValuesTableView.Delegate = null;
        }

        NounSetValuesSession session = null;

        /// <summary>
        /// Exposes the user's current values to the Generate page.
        /// </summary>
        /// <value>The noun values.</value>
        public IReadOnlyDictionary<string, string> NounValues {
            get {
                return (session == null) ? new Dictionary<string, string> () : session.NounValues;
            }
        }

        public bool AllValuesAreSet {
            get {
                return session != null && session.AllValuesAreSet;
            }
        }

        private CentralViewController parent = null;
        internal void SetControllerLinks (CentralViewController centralViewController)
        {
            Console.Error.WriteLine ("SetNounValues SetControllerLinks");

            this.parent = centralViewController;
        }

        internal void SetCompiledTemplate ()
        {
            Console.Error.WriteLine ("SetNounValues SetCompiledTemplate");
        }

        private NSMutableArray nouns = new NSMutableArray ();
        public NSArray Nouns {
            [Export ("nounModelArray")]
            get { return nouns; }
        }

        [Export ("addObject:")]
        public void AddNoun (SetNounModel noun)
        {
            WillChangeValue ("nounModelArray");
            nouns.Add (noun);
            DidChangeValue ("nounModelArray");
        }

        [Export ("insertObject:inNounModelArrayAtIndex:")]
        public void InsertNoun (SetNounModel noun, nint index)
        {
            WillChangeValue ("nounModelArray");
            nouns.Insert (noun, index);
            DidChangeValue ("nounModelArray");
        }

        [Export ("removeObjectFromNounModelArrayAtIndex:")]
        public void RemoveNoun (nint index)
        {
            WillChangeValue ("nounModelArray");
            nouns.RemoveObject (index);
            DidChangeValue ("nounModelArray");
        }

        [Export ("setNounModelArray:")]
        public void SetNouns (NSMutableArray array)
        {
            WillChangeValue ("nounModelArray");
            nouns = array;
            DidChangeValue ("nounModelArray");
        }

    }
}
