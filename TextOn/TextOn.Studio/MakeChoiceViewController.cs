// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using TextOn.Compiler;
using System.Collections.Generic;

namespace TextOn.Studio
{
    /// <summary>
    /// Dialog controller managing the encapsulation of an existing node in a new choice or sequential.
    /// </summary>
    /// <remarks>
    /// The user is required to set isChoice, isTextNodeChoice, TitleText, DescriptionText, SampleText, CompiledTemplate.
    /// </remarks>
	public partial class MakeChoiceViewController : NSViewController
	{
		public MakeChoiceViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Set up the view with useful titles and description.
            Title = TitleText;
            TitleLabel.StringValue = TitleText;
            DescriptionLabel.StringValue = DescriptionText;
            NameTextField.StringValue = NameTextInput;
        }

        public string NameTextInput { get; set; }

        public string NameText {
            get {
                return NameTextField.StringValue;
            }
        }

        public override void ViewDidAppear ()
        {
            base.ViewDidAppear ();

            // Perform syntax highlighting managing a choice/sequential of text nodes
            if (isTextNodeChoice) {
                SampleTextView.CompiledTemplate = CompiledTemplate;
                ToBeAddedTextView.CompiledTemplate = CompiledTemplate;
                AddOne (SampleText);
            }
        }

        partial void AddOne_Clicked (NSObject sender)
        {
            AddOne (ToBeAddedTextView.Value);
            ToBeAddedTextView.Value = "";
            ToBeAddedTextView.Highlight ();
        }

        public CompiledTemplate CompiledTemplate { get; set; } = null;

        /// <summary>
        /// Gets or sets the title text.
        /// </summary>
        /// <value>The title text.</value>
        public string TitleText { get; set; }

        /// <summary>
        /// Gets or sets the description text.
        /// </summary>
        /// <value>The description text.</value>
        public string DescriptionText { get; set; }

        /// <summary>
        /// The user's sample text to insert into the template.
        /// </summary>
        /// <value>The sample text.</value>
        public string SampleText { get; set; }

        public NSViewController Presentor { get; set; }

        private void CloseDialog ()
        {
            Presentor.DismissViewController (this);
        }

        partial void Cancel_Clicked (Foundation.NSObject sender)
        {
            CloseDialog ();
        }

        partial void OK_Clicked (Foundation.NSObject sender)
        {
            RaiseDialogAccepted ();
            CloseDialog ();
        }

        public EventHandler DialogAccepted;

        internal void RaiseDialogAccepted ()
        {
            if (this.DialogAccepted != null)
                this.DialogAccepted (this, EventArgs.Empty);
        }

        private bool _isChoice = true;
        public bool isChoice {
            get {
                return _isChoice;
            }
            set {
                WillChangeValue (nameof (progressLabelText));
                _isChoice = value;
                DidChangeValue (nameof (progressLabelText));
            }
        }

        private readonly List<string> linesOfText = new List<string> ();

        public IEnumerable<string> TextItems {
            get {
                return linesOfText;
            }
        }

        public void AddOne (string textLine)
        {
            WillChangeValue (nameof (progressLabelText));
            linesOfText.Add (textLine);
            DidChangeValue (nameof (progressLabelText));
            if (!isChoice || linesOfText.Count == 1) {
                SampleTextView.Value = textLine;
                SampleTextView.Highlight ();
            }
        }

        public string progressLabelText {
            [Export (nameof (progressLabelText))]
            get {
                return string.Format ("{0} {1}", (isChoice?"Number of choices added:":"Number of sentences added:"), linesOfText.Count);
            }
        }

        private bool _isTextNodeChoice = false;
        public bool isTextNodeChoice {
            [Export (nameof (isTextNodeChoice))]
            get {
                return _isTextNodeChoice;
            }
            set {
                WillChangeValue (nameof (isTextNodeChoice));
                _isTextNodeChoice = value;
                DidChangeValue (nameof (isTextNodeChoice));
            }
        }
	}
}
